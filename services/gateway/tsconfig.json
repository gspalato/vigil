{
	"compilerOptions": {
		// project options
		"lib": ["ESNext", "DOM"], // specifies which default set of type definitions to use ("DOM", "ES6", etc)
		"outDir": "dist", // .js (as well as .d.ts, .js.map, etc.) files will be emitted into this directory.,
		"removeComments": true, // Strips all comments from TypeScript files when converting into JavaScript- you rarely read compiled code so this saves space
		"target": "ES6", // Target environment. Most modern browsers support ES6, but you may want to set it to newer or older. (defaults to ES3)
		"skipLibCheck": true,

		// Treat files as modules even if it doesn't use import/export
		"moduleDetection": "force",

		// Ignore module structure
		"module": "Preserve",

		// Allow JSON modules to be imported
		"resolveJsonModule": true,

		// Allow JS files to be imported from TS and vice versa
		"allowJs": true,

		// Disallow features that require cross-file awareness
		"isolatedModules": true,

		// Module resolution
		"baseUrl": "./", // Lets you set a base directory to resolve non-absolute module names.
		"esModuleInterop": true, // fixes some issues TS originally had with the ES6 spec where TypeScript treats CommonJS/AMD/UMD modules similar to ES6 module
		"moduleResolution": "node",
		"paths": {
			"@/*": ["src/*"],
			"@routes/*": ["src/routes/*"],
			"@clients": ["src/clients"],
			"@generated/*": ["src/generated/*"],
			"@db": ["src/db.ts"]
		}, // A series of entries which re-map imports to lookup locations relative to the baseUrl

		// Source Map
		"sourceMap": false, // enables the use of source maps for debuggers and error reporting etc

		// Strict Checks
		"alwaysStrict": false, // Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.
		"allowUnreachableCode": true, // pick up dead code paths
		"noImplicitAny": false, // In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type.
		"strictNullChecks": true, // When strictNullChecks is true, null and undefined have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.

		// Linter Checks
		"noImplicitReturns": true,
		"noUncheckedIndexedAccess": true, // accessing index must always check for undefined
		"noUnusedLocals": false, // Report errors on unused local variables.
		"noUnusedParameters": false // Report errors on unused parameters in functions
	},
	"include": ["src/**/*.ts"],
	"exclude": ["node_modules/**/*"]
}
